@page "/listprinters"

@using PrinterShop.Shared.Dtos

@inject IPrinterService PrinterService;
@inject IComponentService ComponentService;
@inject NavigationManager NavigationManager;

<h3>List Printers</h3>

<a href="adduser" class="btn btn-danger my-2">Add new printer</a>

@if (_printers is null)
{
    <p>loading...</p>
}
else if (_printers.Count == 0)
{
    <p>There are no users registered.</p>
}
else
{
    <table class="table table-hover">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Brand</th>
            <th scope="col">Model</th>
            <th scope="col">Main Board</th>
            <th scope="col">Stepper Motor</th>
            <th scope="col">Heating Bed</th>
            <th scope="col">Bed Leveling Sensor</th>
            <th scope="col">Extruder</th>
            <th colspan="2" />
        </tr>
        </thead>
        <tbody>
            @foreach (var printer in _printers)
            {
                <tr>
                    <td>@(_index++)</td>
                    <td>@printer.Brand</td>
                    <td>@printer.Model</td>
                    <td>@GetComponentName(printer.MainBoard)</td>
                    <td>@GetComponentName(printer.StepperMotor)</td>
                    <td>@GetComponentName(printer.HeatingBed)</td>
                    <td>@GetComponentName(printer.BedLevelingSensor)</td>
                    <td>@GetComponentName(printer.Extruder)</td>
                    <td>
                        <a class="btn btn-primary" href="updateprinter/@printer.Id">Update Details</a>
                    </td>
                    <td>
                        <button class="btn btn-danger" onclick="@(() => DeletePrinter(printer.Id))">Delete User</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<PrinterDto> _printers;
    private List<ComponentDto> _components;
    private int _index;

    protected override async Task OnInitializedAsync()
    {
        _printers = (await PrinterService.GetAllAsync()).ToList();
        _components = (await ComponentService.GetAllAsync()).ToList();
        _index = 1;
    }

    private async Task DeletePrinter(Guid id)
    {
        await PrinterService.DeleteAsync(id);
        NavigationManager.Refresh();
    }

    private string GetComponentName(Guid id)
    {
        var tmp = _components.FirstOrDefault(x => x.ModelNumber == id);

        return tmp is null ? "unknown" : $"{tmp.Brand} : {tmp.Model}";
    }
    
}